#+TITLE: [WIP] Xile : Xi + Guile

Let's find out if Guile goes with everything ; and make a front-end for Xi
Editor using GNU Guile and libraries.

* Table of Contents :TOC_3:noexport:
- [[#quickstart][Quickstart]]
  - [[#compile-xi-editor][Compile Xi editor]]
  - [[#start][Start]]
  - [[#test-script][Test script]]
  - [[#stop][Stop]]
- [[#dependencies][Dependencies]]
- [[#roadmap][Roadmap]]
- [[#objectives][Objectives]]

* Quickstart

** Compile Xi editor
Update the submodule and =cargo build --release= the bundled [[https://github.com/xi-editor/xi-editor][Xi editor]]

** Start
If you have a working guile with =guile-ncurses= support and =guile-json-scm=
support, it is as simple as
#+BEGIN_SRC bash
./xile.scm
#+END_SRC

By default it will load a user config located in this repo in =config/xile.scm=.
It's hardcoded for now but hopefully will be configurable later.

** Test script
For the time being we are just opening this README file to see how it's
displayed.

All the logs are located in the [[./logs][logs]] folder after the run :
- xi-core.log :: hold the logs from Xi editor process
- xile-listen-{out,err}.log :: hold the logs from xile functions regarding
  callbacks and Xi message parsing
- xile-{out,err}.log :: hold the logs from xile functions outside message
  callbacks

** Stop
Hit =q= to stop Xile.

* Dependencies

I target Guile 3.0 with this little endeavour. The [[./guix_deps][Guix Deps]] directory contains
package definitions for the dependencies which are not yet in guix packages. The
only dependency currently needed which is not in guix packages is the guile3.0
version of ncurses library.

* Roadmap
- [X] Display buffer ::
- [X] Scroll window ::
- [X] Move cursor ::
- [X] User config as scheme ::
- [X] Xile state (buffer local and session-global variables) ::
- [X] Implement the [[https://xi-editor.io/docs/frontend-protocol.html][complete protocol]] :: That is
  1) front -> back serializing, and
  2) back -> front parsing + callbacks
Currently only the ={find,replace}_status= notifications and the =show_hover=
response message are missing. For the notifications, we will see when we want to
support it. For the Show Hover message, this needs to be implemented at the
buffer level ; since the buffer will attach the correct id at runtime and
register the correct callback.
- [X] Keymaps :: holding keymaps to ease the event-loop code is also necessary
  to have multiple editor states
- [ ] Editor states (normal and insert at least) ::
  "Normal" state has been done. Now 1 states is needed :
   1) Insert state where every letter is bound to some =self-insert= method in
      the buffer
- [ ] Proper header/footer :: I want to decouple buffer from its curses window, and
  have the curses-window module actually handle all of header, footer, and main
  window together
- [ ] Scheme evaluator :: on =:= in a vim-like manner, I want to wrap evaluating
  a user-input string
- [ ] Edit file ::
  Set the pristing flag correctly and be able to insert characters
- [ ] Syntax Highlighting :: (using xi-core bundled syntect)

* Objectives

- Learn about using a lisp in a complex project
- Play with ncurses interfaces
- Play with SDL2 a little bit (Postponed until I can get a proper ncurses interface)
- See how difficult it is to build software with a json interface to a provider
  (here we are using [[https://github.com/xi-editor/xi-editor][Xi Editor]] as the core text editor).
