From 39ec812d5d70a03ba3bb45b0b95a0b94264d51d6 Mon Sep 17 00:00:00 2001
From: Gerry Agbobada <gagbobada+git@gmail.com>
Date: Wed, 13 May 2020 01:04:52 +0200
Subject: [PATCH guile-sdl2] ttf: add more bindings

Add bindings to part of FontStyle functions, Font Metrics, the last
Glyph Metrics, and Text Metrics.

Reference used :
https://www.libsdl.org/projects/SDL_ttf/docs/SDL_ttf_19.html#SEC19

Functions added :
* TTF_FontAscent
* TTF_FontDescent
* TTF_FontLineSkip
* TTF_SizeUTF8
* TTF_GlyphIsProvided
* TTF_GetFontStyle
* TTF_SetFontStyle
---
 doc/api.texi          | 56 ++++++++++++++++++++++++++++++++++++++++
 sdl2/bindings/ttf.scm | 59 +++++++++++++++++++++++++++++++++++++++++++
 sdl2/ttf.scm          | 57 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 172 insertions(+)

diff --git a/doc/api.texi b/doc/api.texi
index 6ee2187..1329b6a 100644
--- a/doc/api.texi
+++ b/doc/api.texi
@@ -1377,12 +1377,68 @@ Delete the memory allocated for @var{font}.
 Return the maximum height of @var{font}.
 @end deffn
 
+@deffn {Procedure} font-ascent font
+Return the maximum pixel ascent of all glyphs of @var{font}
+This can also be interpreted as the distance from the top of the font to the baseline.
+@end deffn
+
+@deffn {Procedure} font-descent font
+Return the maximum pixel descent of all glyphs of @var{font}
+This can also be interpreted as the distance from the baseline to the bottom of the font.
+@end deffn
+
+These 2 functions could be used when drawing an individual glyph relative to a top or bottom point,
+by combining it with the glyph's @var{maxy} metric to resolve the top of the rectangle used when
+blitting the glyph on the screen.
+
+@example
+(define (y-position-from-top ch font top) (- (+ top (font-ascent font)) (fourth font-glyph-metric font ch)))
+(define (y-position-from-bottom ch font bottom) (- bottom (font-descent font) (fourth font-glyph-metric font ch)))
+@end example
+
+@deffn {Procedure} font-line-skip font
+Return the recommended pixel height of a rendered line of text using @var{font}
+@end deffn
+
+@deffn {Procedure} font-size-text font text
+Return a 2-element list containing the resulting surface size
+of the utf8 encoded @var{text} using @var{font} in the following format: @code{(width height)}
+No actual rendering is done, however correct kerning is done to get the actual width.
+@end deffn
+
+@deffn {Procedure} font-glyph-index font char
+Return the index of glyph for @var{char} in @var{font}, or @code{#f} for undefined character code.
+@end deffn
+
 @deffn {Procedure} font-glyph-metrics font char
 Return a 5-element list containing the metrics of @var{char} in
 @var{font} in the following format: @code{(minx maxx miny maxy
 advance)}
 @end deffn
 
+@deffn font-get-style font
+Get the rendering style of @var{font}.
+
+Return a list composed of the follwing symbols if the flags are active:
+- @code{bold}
+- @code{italic}
+- @code{underline}
+- @code{strikethrough}
+
+or an empty list if nothing is set (the @code{normal} style)
+@end deffn
+
+@deffn font-set-style! font style
+Set the loaded @var{font} rendering style to @var{style}, a list composed of the following symbols:
+- @code{bold}
+- @code{italic}
+- @code{underline}
+- @code{strikethrough}
+
+This overwrites the old @var{style}: absent symbols will unset their associated flag.
+This means the empty list is used as @var{style} to set the @code{normal} style.
+@end deffn
+
 @deffn {Procedure} render-font-solid font text color
 Render @var{text}, a UTF-8 encoded string, using @var{font} and @var{color}, the
 foreground color, and return a surface containing the results.
diff --git a/sdl2/bindings/ttf.scm b/sdl2/bindings/ttf.scm
index fb3b717..a2ae4cd 100644
--- a/sdl2/bindings/ttf.scm
+++ b/sdl2/bindings/ttf.scm
@@ -24,6 +24,7 @@
 ;;; Code:
 
 (define-module (sdl2 bindings ttf)
+  #:use-module (ice-9 match)
   #:use-module (system foreign)
   #:use-module (sdl2 config)
   #:use-module (sdl2 bindings))
@@ -42,6 +43,43 @@ RETURN-TYPE and accept arguments of ARG-TYPES."
   (define-public name
     (sdl-ttf-func return-type func-name arg-types)))
 
+;; Font style bitmask.
+;; If no bit is set in the mask, that means the style is "normal"
+(define-public SDL_TTF_STYLE_BOLD          #x01)
+(define-public SDL_TTF_STYLE_ITALIC        #x02)
+(define-public SDL_TTF_STYLE_UNDERLINE     #x04)
+(define-public SDL_TTF_STYLE_STRIKETHROUGH #x08)
+
+(define-public (font-style->list font-style)
+  "Font style C bitmask -> Guile list.
+
+Return '(normal) if no bit is set in the bitmask."
+  (let ((symbol-list
+         (fold (lambda (pair prev)
+                 (match pair
+                   ((sym . bit)
+                    (if (zero? (logand font-style bit))
+                        prev
+                        (cons sym prev)))))
+               '()
+               `((bold          . ,SDL_TTF_STYLE_BOLD)
+                 (italic        . ,SDL_TTF_STYLE_ITALIC)
+                 (underline     . ,SDL_TTF_STYLE_UNDERLINE)
+                 (strikethrough . ,SDL_TTF_STYLE_STRIKETHROUGH)))))
+    (if (zero? (length symbol-list))
+        '(normal)
+        symbol-list)))
+
+(define-public (style-flags->bitmask flags)
+  "Guile list -> Font style C bitmask."
+  (apply logior
+         (map (match-lambda
+                ('bold          SDL_TTF_STYLE_BOLD)
+                ('italic        SDL_TTF_STYLE_ITALIC)
+                ('underline     SDL_TTF_STYLE_UNDERLINE)
+                ('strikethrough SDL_TTF_STYLE_STRIKETHROUGH))
+              flags)))
+
 (define-foreign ttf-init
   int "TTF_Init" '())
 
@@ -57,9 +95,30 @@ RETURN-TYPE and accept arguments of ARG-TYPES."
 (define-foreign ttf-font-height
   int "TTF_FontHeight" '(*))
 
+(define-foreign ttf-font-ascent
+  int "TTF_FontAscent" '(*))
+
+(define-foreign ttf-font-descent
+  int "TTF_FontDescent" '(*))
+
+(define-foreign ttf-font-line-skip
+  int "TTF_FontLineSkip" '(*))
+
+(define-foreign ttf-size-utf8
+  int "TTF_SizeUTF8" '(* * * *))
+
+(define-foreign ttf-glyph-is-provided
+  int "TTF_GlyphIsProvided" (list '* uint16))
+
 (define-foreign ttf-glyph-metrics
   int "TTF_GlyphMetrics" (list '* uint16 '* '* '* '* '*))
 
+(define-foreign ttf-get-font-style
+  int "TTF_GetFontStyle" '(*))
+
+(define-foreign ttf-set-font-style
+  void "TTF_SetFontStyle" (list '* int))
+
 (define-foreign ttf-render-text-solid
   '* "TTF_RenderText_Solid" (list '* '* sdl-color))
 
diff --git a/sdl2/ttf.scm b/sdl2/ttf.scm
index a20ae69..78b9370 100644
--- a/sdl2/ttf.scm
+++ b/sdl2/ttf.scm
@@ -35,8 +35,16 @@
             load-font
             delete-font!
             font-height
+            font-ascent
+            font-descent
+            font-line-skip
+            font-size-text
+            font-glyph-index
             font-glyph-metrics
 
+            font-get-style
+            font-set-style!
+
             render-font-solid
             render-font-blended))
 
@@ -72,6 +80,34 @@ size is POINT-SIZE."
   "Return the maximum height of FONT."
   (ffi:ttf-font-height (unwrap-font font)))
 
+(define (font-ascent font)
+  "Return the maximum pixel ascent of all glyphs of the loaded FONT."
+  (ffi:ttf-font-ascent (unwrap-font font)))
+
+(define (font-descent font)
+  "Return the maximum pixel descent of all glyphs of the loaded FONT."
+  (ffi:ttf-font-descent (unwrap-font font)))
+
+(define (font-line-skip font)
+  "Return the recommended pixel height of a rendered line of text of loaded FONT."
+  (ffi:ttf-font-line-skip (unwrap-font font)))
+
+(define (font-size-text font text)
+  "Return a 2-element list containing the resulting surface size
+of the utf8 encoded TEXT using FONT in the following format: (width height)."
+  (let ((bv (make-s32vector 2)))
+    (if (zero? (ffi:ttf-size-utf8 (unwrap-font font)
+                                  (string->pointer text)
+                                  (bytevector->pointer bv)
+                                  (bytevector->pointer bv 4)))
+        (s32vector->list bv)
+        (sdl-error "size-utf8" "failed to get size utf8"))))
+
+(define (font-glyph-index font char)
+  "Return the index of glyph for CHAR in FONT, or #f for undefined character code."
+  (let ((result (ffi:ttf-glyph-is-provided (unwrap-font font) (char->integer char))))
+    (if (eq? result 0) #f result)))
+
 (define (font-glyph-metrics font char)
   "Return a 5-element list containing the metrics of CHAR in FONT in
 the following format: (minx maxx miny maxy advance)"
@@ -86,6 +122,27 @@ the following format: (minx maxx miny maxy advance)"
         (s32vector->list bv)
         (sdl-error "font-glyph-metrics" "failed to get glyph metrics"))))
 
+(define (font-get-style font)
+  "Get the rendering style of the loaded FONT.
+Return a list composed of :
+- 'bold
+- 'italic
+- 'underline
+- 'strikethrough
+
+or an empty list if nothing is set"
+  (ffi:font-style->list (ffi:ttf-get-font-style (unwrap-font font))))
+
+(define (font-set-style! font style)
+  "Set the loaded FONT style to STYLE, a list composed of:
+- 'bold
+- 'italic
+- 'underline
+- 'strikethrough
+
+Use an empty list to set the normal style."
+  (ffi:ttf-set-font-style (unwrap-font font) (ffi:style-flags->bitmask style)))
+
 (define (render-font-solid font text color)
   "Render TEXT, a UTF-8 encoded string, using FONT and COLOR, the
 foreground color, and return a surface containing the results."
-- 
2.26.2

